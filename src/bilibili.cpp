#include "bilibili.h"

Bilibili::Bilibili(QObject *parent)
    : QObject(parent)
{
    ass_file = new QFile("/tmp/qlpbilibili.ass", this);

    nam = new QNetworkAccessManager(this);
    connect(nam, &QNetworkAccessManager::finished, this, &Bilibili::httpFinished);
}

Bilibili::~Bilibili()
{
    ass_file->remove();
}

void Bilibili::run(QString av_num, QString part)
{
    QString url;
    if(av_num[0] == 'a') {
        url = "https://www.bilibili.com/video/" + av_num + "?p=" + (part.isEmpty() ? "1" : part);
    } else if (av_num[0] == 'e'){
        url = "https://www.bilibili.com/bangumi/play/" + av_num;
    } else if (av_num[0] == 'B'){
        url = "https://www.bilibili.com/video/" + av_num + "?p=" + (part.isEmpty() ? "1" : part);
    } else {
        return;
    }
    QProcess p;
    p.start("ykdl", QStringList() << "-i" << url);
    p.waitForStarted(5000);
    p.waitForFinished(5000);
    QRegularExpression re("^(http.+)$");
    QRegularExpression re_title("^title: +([^\n]+)$");
    bool real_url_flag = false;
    while(!p.atEnd()) {
        QString line(p.readLine());
        if (line.contains("Real urls")) {
            if (real_url_flag == false) {
                real_url_flag = true;
            } else {
                break;
            }
        }
        QRegularExpressionMatch match = re_title.match(line);
        if (match.hasMatch()) {
             this->title = match.captured(1);
        }
        match = re.match(line);
        if (match.hasMatch()) {
             real_url.append(match.captured(1));
        }
    }
    if (real_url.isEmpty()) {
        return;
    }
    setRes();
    auto sl = real_url[0].split('/', QString::SkipEmptyParts);
    auto cid = sl.at(sl.length() - 2);
//    qDebug() << cid;
    QNetworkRequest qnr("https://comment.bilibili.com/" + cid + ".xml");
//    qDebug() << real_url;
    nam->get(qnr);
}

void Bilibili::genAss()
{
    if (!ass_file->open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    QTextStream out(ass_file);
    out << "[Script Info]\n"
           "; Script generated by QLivePlayer\n"
           "; https://github.com/IsoaSFlus/QLivePlayer\n"
           "Title: Danmaku file\n"
           "ScriptType: v4.00+\n"
           "WrapStyle: 0\n"
           "ScaledBorderAndShadow: yes\n"
           "YCbCr Matrix: None\n"
           + QString("PlayResX: %1\n").arg(QString::number(res_x)) +
           "PlayResY: 1080\n"
           "[V4+ Styles]\n"
           "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n"
           "Style: Default,Sans,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0,7,0,0,0,1\n"
           "[Events]\n"
           "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n";
    for (int i = 0; i < 30; i++) {
        danmaku_channel[i].length = 1;
        danmaku_channel[i].begin_pts = -20;
    }
    auto iter = danmaku_map.constBegin();
    int display_length = 0;
    int avail_channel = -1;
    QString t1 ,t2, c;
    while (iter != danmaku_map.constEnd()) {
//        qDebug() << iter.key() << iter.value();
        if (iter.value().first[0] == '4') {
            avail_channel = 1; // bottom
        } else if (iter.value().first[0] == '5') {
            avail_channel = 1; // top
        } else {
            display_length = getDankamuDisplayLength(iter.value().first.mid(1), 40);
            avail_channel = getAvailDMChannel(iter.key(), display_length);
        }
        if (avail_channel >= 0) {
            t1 = QTime::fromMSecsSinceStartOfDay(iter.key()*1000.0).toString("hh:mm:ss.zzz");
            t2 = QTime::fromMSecsSinceStartOfDay((iter.key()+speed)*1000.0).toString("hh:mm:ss.zzz");
            t1.chop(1);
            t2.chop(1);
            c = QString::number(iter.value().second, 16);
            if (iter.value().first[0] == '4') {
                out << QString("Dialogue: 0,%2,%3,Default,,0,0,0,,{\\1c&%4&\\an2}%1")
                            .arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)) << "\n";
            } else if (iter.value().first[0] == '5') {
                out << QString("Dialogue: 0,%2,%3,Default,,0,0,0,,{\\1c&%4&\\an8}%1")
                            .arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)) << "\n";
            } else {
                out << QString("Dialogue: 0,%4,%5,Default,,0,0,0,,{\\1c&%6&\\move(%7,%1,%2,%1)}%3")
                            .arg(QString::number(avail_channel*(40))).arg(QString::number(0-display_length)).arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)).arg(QString::number(res_x)) << "\n";
            }
        }
        ++iter;
    }
    ass_file->close();
    QProcess::startDetached("mpv", QStringList() << "--player-operation-mode=pseudo-gui" << "--force-media-title=" + title << "--vf=lavfi=\"fps=60\"" << "--sub-file=/tmp/qlpbilibili.ass" << "--merge-files" << real_url);
    real_url.clear();
}

void Bilibili::setRes()
{
    QProcess p;
    p.start("ffmpeg", QStringList() << "-user_agent" << "aaa" << "-i" << real_url[0]);
    p.waitForStarted(5000);
    p.waitForFinished(5000);
    QRegularExpression re(" ([0-9]+)x([0-9]+)");
    QRegularExpressionMatch match = re.match(p.readAllStandardError());
    if (match.hasMatch()) {
         res_x = res_y * match.captured(1).toDouble() / match.captured(2).toDouble();
    }
}

int Bilibili::getDankamuDisplayLength(QString dm, int fontsize)
{
    int ascii_num = 0;
    int dm_size = dm.size();
    if (dm_size <= 0) {
        return fontsize * 0.75 * 10;
    }
    const QChar *data = dm.constData();
    while (dm_size > 0) {
        if (data->unicode() < 128) {
            ++ascii_num;
        }
        ++data;
        --dm_size;
    }
    return (fontsize * 0.75 * dm.size()) - (fontsize * 0.25 * ascii_num);
}

int Bilibili::getAvailDMChannel(double time_start, int len)
{
    double s = (res_x + (double)len) / this->speed;
    for (int i = 0; i < 20; i++)
    {
        if (((this->speed - time_start + danmaku_channel[i].begin_pts) * s) > res_x) {
            continue;
        } else {
            if ((((double)danmaku_channel[i].length + res_x) * (time_start - danmaku_channel[i].begin_pts) / this->speed) < danmaku_channel[i].length ) {
                continue;
            } else {
                danmaku_channel[i].length = len;
                danmaku_channel[i].begin_pts = time_start;
                return i;
            }
        }
    }
    return -4;
}

void Bilibili::httpFinished(QNetworkReply *reply)
{
    if (reply->error() != QNetworkReply::NoError) {
        qDebug() << "Network error: " << reply->error();
        reply->deleteLater();
        return;
    }
    danmaku_map.clear();
    QString xml(reply->readAll());
    int cur = -1;
    int i = -1, j = -1;
    while (1) {
        cur = xml.indexOf("<d p=\"", cur + 1);
        if (cur == -1) {
            break;
        }
        i = xml.indexOf("\"", cur + 6);
        j = xml.indexOf("</d>", cur);
        danmaku_map.insertMulti(xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[0].toDouble(),
                QPair<QString, int>(xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[1] + xml.midRef(i + 2, j - i - 2), xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[3].toInt()));
    }

    genAss();

    reply->deleteLater();
}
