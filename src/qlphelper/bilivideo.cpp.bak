#include <iostream>
#include "bilivideo.h"

BiliVideo::BiliVideo(QObject *parent)
    : QObject(parent)
{
    ass_file = new QFile(QString("/tmp/qlp-%1.ass").arg(QUuid::createUuid().toString()), this);

    nam = new QNetworkAccessManager(this);
    connect(nam, &QNetworkAccessManager::finished, this, &BiliVideo::httpFinished);

    QSettings s("QLivePlayer", "QLivePlayer", this);
    cookie = s.value("bcookie", QString("")).toString();
    hevc = s.value("bhevc", false).toBool();

    mpv_proc = new QProcess(this);
    connect(mpv_proc, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            [=](int exitCode, QProcess::ExitStatus exitStatus){
        Q_UNUSED(exitStatus);
        QCoreApplication::exit(exitCode);
    });
}

BiliVideo::~BiliVideo()
{
    ass_file->remove();
    for (const auto& f : seg_file_list) {
        f->remove();
    }
    if (merge_file) {
        merge_file->remove();
    }
}

void BiliVideo::run(QString url, QString part)
{
    real_url.clear();
    title.clear();
    res_x = 1920;
    res_y = 1080;
    QProcess p;
    QStringList args;
    args.append(QStandardPaths::locate(QStandardPaths::DataLocation, "bili_url.py"));
    args.append(url);
    args.append(cookie);
    qDebug() << args;
    p.start("python3", args);
    p.waitForStarted(5000);
    p.waitForFinished();
    QRegularExpression re("^(http.+)$");
    while(!p.atEnd()) {
        QString line(p.readLine());
        qDebug() << line;
        if (line.left(6) == "title:") {
            line.remove(0, 6);
            this->title = line;
            continue;
        }
        QRegularExpressionMatch match = re.match(line);
        if (match.hasMatch()) {
             real_url.append(match.captured(1));
        }
    }
    if (real_url.isEmpty()) {
        qInfo() << "No valid url fetched!";
        exit(1);
    }

    setRes();

    genEDLUrl();

    auto sl = real_url[0].split('/', QString::SkipEmptyParts);
    auto cid = sl.at(sl.length() - 2);
//    qDebug() << cid;
    QNetworkRequest qnr("https://comment.bilibili.com/" + cid + ".xml");
//    qDebug() << real_url;
    nam->get(qnr);
}

void BiliVideo::genAss()
{
    if (!ass_file->open(QIODevice::WriteOnly | QIODevice::Text))
        return;
    QTextStream out(ass_file);
    out << "[Script Info]\n"
           "; Script generated by QLivePlayer\n"
           "; https://github.com/IsoaSFlus/QLivePlayer\n"
           "Title: Danmaku file\n"
           "ScriptType: v4.00+\n"
           "WrapStyle: 0\n"
           "ScaledBorderAndShadow: yes\n"
           "YCbCr Matrix: None\n"
           + QString("PlayResX: %1\n").arg(QString::number(res_x)) +
           "PlayResY: 1080\n"
           "[V4+ Styles]\n"
           "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n"
           "Style: Default,Sans,40,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1,0,7,0,0,0,1\n"
           "[Events]\n"
           "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n";
    for (int i = 0; i < 30; i++) {
        danmaku_channel[i].length = 1;
        danmaku_channel[i].begin_pts = -20;
    }
    auto iter = danmaku_map.constBegin();
    int display_length = 0;
    int avail_channel = -1;
    QString t1 ,t2, c;
    while (iter != danmaku_map.constEnd()) {
//        qDebug() << iter.key() << iter.value();
        if (iter.value().first[0] == '4') {
            avail_channel = 1; // bottom
        } else if (iter.value().first[0] == '5') {
            avail_channel = 1; // top
        } else {
            display_length = getDankamuDisplayLength(iter.value().first.mid(1), 40);
            avail_channel = getAvailDMChannel(iter.key(), display_length);
        }
        if (avail_channel >= 0) {
            t1 = QTime::fromMSecsSinceStartOfDay(iter.key()*1000.0).toString("hh:mm:ss.zzz");
            t2 = QTime::fromMSecsSinceStartOfDay((iter.key()+speed)*1000.0).toString("hh:mm:ss.zzz");
            t1.chop(1);
            t2.chop(1);
            c = QString::number(iter.value().second, 16);
            if (iter.value().first[0] == '4') {
                out << QString("Dialogue: 0,%2,%3,Default,,0,0,0,,{\\1c&%4&\\an2}%1")
                            .arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)) << "\n";
            } else if (iter.value().first[0] == '5') {
                out << QString("Dialogue: 0,%2,%3,Default,,0,0,0,,{\\1c&%4&\\an8}%1")
                            .arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)) << "\n";
            } else {
                out << QString("Dialogue: 0,%4,%5,Default,,0,0,0,,{\\1c&%6&\\move(%7,%1,%2,%1)}%3")
                            .arg(QString::number(avail_channel*(40))).arg(QString::number(0-display_length)).arg(iter.value().first.midRef(1))
                            .arg(t1).arg(t2).arg(c.midRef(4, 2) + c.midRef(2, 2) + c.midRef(0, 2)).arg(QString::number(res_x)) << "\n";
            }
        }
        ++iter;
    }
    ass_file->close();
    if (saved_file) {
        downloadVideo();
    } else {
        QStringList args;
        args.append("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36");
        args.append("--http-header-fields-add=Referer: https://www.bilibili.com/");
        mpv_proc->start("mpv", args << "--player-operation-mode=pseudo-gui" << "--force-media-title=" + title
                        << "--vf=lavfi=\"fps=60\"" << "--sub-file=" + ass_file->fileName() << edl_url);
    }
}

void BiliVideo::setRes()
{
    QProcess p;
    p.start("ffmpeg", QStringList() << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
            << "-headers" << "Referer: https://www.bilibili.com/" << "-i" << real_url[0]);
    p.waitForStarted(5000);
    p.waitForFinished();
    QRegularExpression re(", ([0-9]+)x([0-9]+)");
    QRegularExpressionMatch match = re.match(p.readAllStandardError());
//    qDebug() << match.captured(1).toDouble() << match.captured(2).toDouble();
    if (match.hasMatch()) {
         res_x = res_y * match.captured(1).toDouble() / match.captured(2).toDouble();
    }
}

int BiliVideo::getDankamuDisplayLength(QString dm, int fontsize)
{
    int ascii_num = 0;
    int dm_size = dm.size();
    if (dm_size <= 0) {
        return fontsize * 0.75 * 10;
    }
    const QChar *data = dm.constData();
    while (dm_size > 0) {
        if (data->unicode() < 128) {
            ++ascii_num;
        }
        ++data;
        --dm_size;
    }
    return (fontsize * 0.75 * dm.size()) - (fontsize * 0.25 * ascii_num);
}

int BiliVideo::getAvailDMChannel(double time_start, int len)
{
    double s = (res_x + (double)len) / this->speed;
    for (int i = 0; i < 20; i++)
    {
        if (((this->speed - time_start + danmaku_channel[i].begin_pts) * s) > res_x) {
            continue;
        } else {
            if ((((double)danmaku_channel[i].length + res_x) * (time_start - danmaku_channel[i].begin_pts) / this->speed) < danmaku_channel[i].length ) {
                continue;
            } else {
                danmaku_channel[i].length = len;
                danmaku_channel[i].begin_pts = time_start;
                return i;
            }
        }
    }
    return -4;
}

void BiliVideo::httpFinished(QNetworkReply *reply)
{
    if (reply->error() != QNetworkReply::NoError) {
        qDebug() << "Network error: " << reply->error();
        reply->deleteLater();
        return;
    }
    danmaku_map.clear();
    QString xml(reply->readAll());
    int cur = -1;
    int i = -1, j = -1;
    while (1) {
        cur = xml.indexOf("<d p=\"", cur + 1);
        if (cur == -1) {
            break;
        }
        i = xml.indexOf("\"", cur + 6);
        j = xml.indexOf("</d>", cur);
        danmaku_map.insertMulti(xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[0].toDouble(),
                QPair<QString, int>(xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[1] + xml.midRef(i + 2, j - i - 2), xml.midRef(cur + 6, i - cur - 6).split(',', QString::SkipEmptyParts)[3].toInt()));
    }

    genAss();

    reply->deleteLater();
}

inline void BiliVideo::genEDLUrl()
{
    if (real_url[0].contains(".m4s")) {
        if (real_url.length() == 3 && hevc == true) {
            edl_url = QString("edl://!no_clip;!no_chapters;\%%1\%%3;!new_stream;!no_clip;!no_chapters;\%%2\%%4")
                    .arg(real_url[1].length()).arg(real_url[2].length()).arg(real_url[1]).arg(real_url[2]);
        } else {
            edl_url = QString("edl://!no_clip;!no_chapters;\%%1\%%3;!new_stream;!no_clip;!no_chapters;\%%2\%%4")
                    .arg(real_url[1].length()).arg(real_url[0].length()).arg(real_url[1]).arg(real_url[0]);
        }
    } else {
        edl_url = QString("edl://");
        for (const auto& u : real_url) {
            edl_url.append(QString("\%%1\%%2;").arg(u.length()).arg(u));
        }
    }
}

void BiliVideo::downloadVideo()
{
    QProcess *p = new QProcess(this);
    connect(p, &QProcess::readyReadStandardError, [=] () {
        std::cerr << p->readAllStandardError().toStdString();
    });
    connect(p, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
            [=](int exitCode, QProcess::ExitStatus exitStatus){
        Q_UNUSED(exitStatus);
        QCoreApplication::exit(exitCode);
    });
    if (real_url[0].contains(".m4s")) {
        if (real_url.length() == 3 && hevc == true) {
            p->start("ffmpeg", QStringList()
                    << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
                    << "-headers" << "Referer: https://www.bilibili.com/" << "-i" << real_url[2]
                    << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
                    << "-headers" << "Referer: https://www.bilibili.com/" << "-i" << real_url[1]
                    << "-i" << ass_file->fileName()
                    << "-c" << "copy" << saved_file->fileName());
        } else {
            p->start("ffmpeg", QStringList()
                    << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
                    << "-headers" << "Referer: https://www.bilibili.com/" << "-i" << real_url[0]
                    << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
                    << "-headers" << "Referer: https://www.bilibili.com/" << "-i"<< real_url[1]
                    << "-i" << ass_file->fileName()
                    << "-c" << "copy" << saved_file->fileName());
        }
    } else {
        connect(this, &BiliVideo::dlFinished, [=]() {
            this->merge_file = new QFile(QString("/tmp/qlp-%1.txt").arg(QUuid::createUuid().toString()), this);
            if (!this->merge_file->open(QIODevice::WriteOnly | QIODevice::Text))
                return;
            QTextStream out(this->merge_file);
            for (const auto& f : this->seg_file_list) {
                out << "file ";
                out << f->fileName();
                out << "\n";
            }
            this->merge_file->close();
            p->start("ffmpeg", QStringList()
    //                 << "-report" << "-fflags" << "+igndts"
                     << "-f" << "concat" << "-safe" << "0"
                     << "-i" << this->merge_file->fileName()
                     << "-i" << this->ass_file->fileName()
    //                 << "-bsf:a" << "aac_adtstoasc"
                     << "-c" << "copy" << "-fflags" << "+genpts" << this->saved_file->fileName());
        });
        startSegFifoProc();
    }
}

void BiliVideo::setSavedFilePath(QString path)
{
    this->saved_file = new QFile(path, this);
}

void BiliVideo::startSegFifoProc()
{

    for (const auto& u : real_url) {
        QProcess *p = new QProcess(this);
        QFile *f = new QFile(QString("%2/qlp-%1.flv").arg(QUuid::createUuid().toString()).arg(QFileInfo(saved_file->fileName()).absoluteDir().absolutePath()), this);
        seg_file_list.append(f);
//        QProcess::execute("mkfifo", QStringList() << seg_fifo_list.last()->fileName());
//        p->start("ffmpeg", QStringList()
//                 << "-y" << "-fflags" << "+igndts"
//                 << "-user_agent" << "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
//                 << "-headers" << "Referer: https://www.bilibili.com/"
//                 << "-i" << u << "-bsf:v" << "h264_mp4toannexb" << "-fflags" << "+genpts"
//                 << "-c" << "copy" << "-f" << "mpegts" << seg_fifo_list.last()->fileName());
        connect(p, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
                [=](int exitCode, QProcess::ExitStatus exitStatus){
            Q_UNUSED(exitStatus);
            if (exitCode != 0) {
                qCritical() << "Network error!";
                QCoreApplication::exit(exitCode);
            } else {
                this->dl_cnt++;
                if (this->dl_cnt == this->real_url.length()) {
                    emit this->dlFinished();
                }
            }
        });
        p->start("curl", QStringList()
                 << u
                 << "-H" << "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"
                 << "-H" << "Referer: https://www.bilibili.com/"
                 << "-o" << seg_file_list.last()->fileName());
        qInfo() << "Start download...";
    }
}

void BiliVideo::startHttpServer()
{
    QString concat_file = "#EXTM3U\\n#EXT-X-MEDIA-SEQUENCE:0\\n";
    for (const auto& u : real_url) {
        concat_file.append("#EXTINF:-1,\\n");
        concat_file.append(u);
        concat_file.append("\\n");
    }
    QProcess *p = new QProcess(this);
    p->start("python", QStringList() << "-c" <<
             "import asyncio, aiohttp\n"
             "async def handler(request):\n"
             "    out = '" + concat_file + "'\n"
             "    return aiohttp.web.Response(text=out)\n"
             "app = aiohttp.web.Application()\n"
             "app.add_routes([\n"
             "  aiohttp.web.get('/a.m3u8', handler)\n"
             "])\n"
             "aiohttp.web.run_app(app, host='127.0.0.1', port=7865)\n");
    p->waitForFinished(3000);
}
